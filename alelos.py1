#! /bin/bash
importar scipy # para números aleatorios

def construir_población(N, p):
    " " " cada cromosoma tiene un alelo y N es el numero de individuos
    " " "


    for  i  in range(N):    # se crea un bucle for casual con las variables ay A, para ir agregando alelos aleatorios
                
        alelo1 = " A "    
        if  scipy.random.rand () > p: # la probabilidad de tener alelos ay A debe ser mayor a 0.43
            alelo1 = " a "
        alelo2 = " A "
        si  scipy.random.rand () > p:
            alelo2 = " a "
        población.append (( alelo 1 , alelo 2 ))
    población de retorno

build_population(N = 25, p = 0.43) # para 25 individuos con probabilidad de 0.43, devolver la poblacion con alelos Aay aA al azar

# FUNCIÓN 2.  Se realizo el conteo  de pares de alelos
def computar_frecuencias(población)
    #  Se cuenta  los genotipos y devuelve un diccionario de frecuencias genotípicas 
    AA = población.recuento (( "A" , "A" ))
    Aa = población.recuento (( "A" , "a" ))
    aA = población.recuento (( "a" , "A" ))
    aa = población.recuento (( "a" , "a" ))
    return({ " AA " : AA, " aa " : aa, " Aa " : Aa, " aA " : aA}) # forma el diccionario
my_pop = build_population(500, 0.21)
fmy_pop = compute_frequencies(my_pop) # observar  las frecuencias de los alelos aleatorios creados en la funcion 1
imprimir (fmy_pop)
print (( 500 - fmy_pop["aa"]) / 500 ) #observar una poblacion de 500  alelos
# FUNCIÓN 3 . se crea una nueva poblacion 
def reproducir_población(población):
    #Para cada N producir una nueva generacion al azar
    nueva_generacion = []
    N = len(población)
    para i en el rango (N):
        # entero aleatorio entre 0 y N- 1
        dad = scipy.random.randint(N) #obtiene el cromosoma de papa
        mom = scipy.random.randint(N) #obtiene el cromosoma de mama
        #observar que cromosoma se obtiene de mama
        chr_mom = scipy.random.randint( 2 )
        descendencia = (poblacion[mama][chr_mom], poblacion[papa][ 1 - chr_mom]) #ver la descendencia entre mama y papa
        #si descendencia == ("a", "a"):
          #Siguiente()
        new_generation.append(offspring) # realizar las nuevas generaciones al final de cada cromosoma
    
    volver nueva_generación
imprimir (compute_frequencies (my_pop ))
new_pop = reproducir_population(my_pop) #  observar  la nueva reproduccion en cada individuo, segun los alelos generados de mama y papa
new_pop2 = reproducir_población(new_pop)
imprimir (compute_frequencies (new_pop))
imprimir (compute_frequencies (new_pop2)
